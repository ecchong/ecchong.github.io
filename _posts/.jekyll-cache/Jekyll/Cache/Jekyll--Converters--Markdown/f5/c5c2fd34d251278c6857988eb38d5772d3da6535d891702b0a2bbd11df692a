I"ç<p>I recently got tripped by Ansible variables precedence.  We are familiar with the <a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#:~:text=Ansible%20does%20apply%20variable%20precedence,in%20role%2Fdefaults%2Fmain.">precedence concept</a>. Sometime in a complex playbooks, it help to remember how variables are loaded.</p>

<p>In recent project, a playbook is used to deploy configuration to a brand new Cisco switch setup with a temporary password.  The real password for the whole environment is stored in <code class="language-plaintext highlighter-rouge">prod.yaml</code> file and loaded using <code class="language-plaintext highlighter-rouge">include_vars</code> early in the playbook.  In order to connect to the new switch, I use set_fact to set the temporary credential, and expected I can reconnect to the switch with the production password once the configuration is loaded and rebooted.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Load production credential for the environment</span>
  <span class="na">include_vars</span><span class="pi">:</span> <span class="s">prod.yaml</span>
  <span class="s">...</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set a temporary password to connect to the new switch</span>
  <span class="na">set_fact</span><span class="pi">:</span>
    <span class="na">ansible_password</span><span class="pi">:</span> <span class="s">temp_password</span>
    <span class="na">ansible_become_password</span><span class="pi">:</span> <span class="s">temp_enable_password</span>
  <span class="s">...</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">The configuration tasks and reboot the new switch</span>
  <span class="s">...</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Try to reset the production credential and reconnect to the new switch</span>
  <span class="na">include_vars</span><span class="pi">:</span> <span class="s">prod.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Do more configuration with production credential</span>
  <span class="na">ios_command</span><span class="pi">:</span>
    <span class="na">commands</span><span class="pi">:</span> <span class="s">show version</span>
</code></pre></div></div>

<p>It turns out set_fact has higher precendence than include_vars.  The temporary credential is still being used at the last task.  The only way to overwrite that is with another <code class="language-plaintext highlighter-rouge">set_fact</code>.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Try to reset the production credential and reconnect to the new switch</span>
  <span class="na">include_vars</span><span class="pi">:</span>
    <span class="na">file</span><span class="pi">:</span> <span class="s">prod.yaml</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">prod_vars</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Reset the passwords</span>
  <span class="na">set_fact</span><span class="pi">:</span>
    <span class="na">ansible_password</span><span class="pi">:</span> <span class="s">prod_vars.ansible_password</span>
    <span class="na">ansible_enable_password</span><span class="pi">:</span> <span class="s">prod_vars.ansible_enable_password</span>
</code></pre></div></div>
:ET